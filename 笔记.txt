
备忘录

  █████░▒██   ██  ▄████▄   ██ ▄█▀       ██████╗ ██╗   ██╗ ██████╗
 ▓██   ▒ ██  ▓██▒▒██▀ ▀█   ██▄█▒        ██╔══██╗██║   ██║██╔════╝
 ▒████ ░▓██  ▒██░▒▓█    ▄ ▓███▄░        ██████╔╝██║   ██║██║  ███╗
 ░▓█▒  ░▓▓█  ░██░▒▓▓▄ ▄██▒▓██ █▄        ██╔══██╗██║   ██║██║   ██║
 ░▒█░   ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄       ██████╔╝╚██████╔╝╚██████╔╝
  ▒ ░   ░▒▓▒ ▒ ▒ ░ ░▒ ▒  ░▒ ▒▒ ▓▒       ╚═════╝  ╚═════╝  ╚═════╝
  ░     ░░▒░ ░ ░   ░  ▒   ░ ░▒ ▒░
  ░ ░    ░░░ ░ ░ ░        ░ ░░ ░
           ░     ░ ░      ░  ░

┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐
│Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│ │ F │ U │ C │ K │
└───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘ └───┴───┴───┴───┘
┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐
│~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│& 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / ││ - │
├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤
│ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │{ [│} ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │
├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │
│ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│" '│ Enter  │               │ 4 │ 5 │ 6 │   │
├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤
│ Shift  │ Z │ X │ C │ V │ B │ N │ M │< ,│> .│? /│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │
├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││
│ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│
└─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -






































- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1、每天看2个视频课
2、每天做2个力扣题
3、laravel社区重新走一遍；





https://wordpress.org/latest.tar.gz




































- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

1、洋葱（lks）同步
2、新风向（特区、德康）同步
3、涂鸦（tuya）同步
4、闯关地图，加权限
5、360度评估
6、一对一评价
7、线下训练时长
8、带教项目管理
9、51cto 课程同步
10、微问管理
11、测评（问卷星）
12、国聘高考

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

homestead 的相关命令

重启 PHP

    php.ini

        /etc/php/7.3/fpm
        /etc/php/7.3/cli

    sudo service php7.3-fpm restart

安装 rabbitmq

    sudo apt-get install rabbitmq-server

    sudo rabbitmqctl status

安装 mongodb

    sudo pecl install mongodb

    sudo pecl channel-update pecl.php.net


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

天眼风控：

    super
    super2019

后台管理：

    国内系统（测试）

        地址：http://testboss.zfd.kdcaopan.com
        账号：admin
        密码：Hsb@@123456

    国内系统（正式）

        地址：http://syspro.dai.zhangfujr.com
        账号：admin
        密码：Hsb@@123456

    印尼系统（测试）：

        地址：http://39.96.161.37:8080
        账号：admin
        密码：gojet@2019

    印尼系统（正式）：

        地址：http://149.129.251.98:8082
        账号：admin
        密码：gojet@2019

    KSP

        job.makmurabadiin.com
        cdn.makmurabadiin.com
        api.makmurabadiin.com
        console.makmurabadiin.com

    智投测试BOSS：

        地址：http://testztadmin2.jiexiangtech.com/
        账号：admin@heshuibar.com
        密码：zhang235

    智投正式BOSS：

        地址：http://ztadmin.67network.com
        账号：yls
        密码：ygh123456@

    新后台：root   123456
    git 地址：https://e.coding.net/lihuangde/gpeso/gpeso-console.git

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

数据库：

    急贷宝 | 掌富贷 | SAAS

        地址：http://59.110.46.55/2phpmyadmin2
        账号：rdsdb_root
        密码：1@AbED#4%eA4y03&45$5F7*d8D

    SAAS ⻛风控地址  | 回调数据

        地址：http://59.110.46.55/1phpmyadmin1/
        账号：paydaydb_root
        密码：D#4%eA4y01@AbE3&48D5$5F7*d

    海外测试：

        地址：http://www.jiexiangtech.com/2phpmyadmin2
        账号：root
        密码：localR@@T

    海外正式：

        地址：http://149.129.251.98:8082/2phpmyadmin2
        账号：rds_root
        密码：LHm1$2Hm1$*d3Ab&b5#1

    海外 KSP：

        地址：http://149.129.251.98:8082/2phpmyadmin2
        账号：rds_root
        密码：LHm1$2Hm1$*d3Ab&b5#1
        库名：uangbagus_ksp_pro

    操盘：（测试库zhitou_dev）

        地址：http://59.110.24.151/phpmyadmin21
        账号：rdsdb_root
        密码：1@AbED#4%eA4y03&45$5F7*d8D

        新增线上只读库账号 zhitou_rdsdev_pr
        密码同老账号 zhitou_rdsdev

        1$7&MA4Dd8F2Nkw#D3

    菲律宾：
        http://47.94.235.248:8088/2phpmyadmin2/
        root
        localR@@T
        数据库 uangbagus_pro

        47.94.235.248
        /srv/cdn
        cdn.gpeso.com

        /srv/api
        api.gpeso.com

        /srv/console
        console.gpeso.com

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Git仓库：

    急贷宝boss：git@101.201.154.89:/data/git/maibei7-admin.git
    急贷宝api： git@101.201.154.89:/data/git/maibei7-backend.git

    掌富贷boss：git@101.201.154.89:/data/git/maibei-admin.git
    掌富贷api： git@101.201.154.89:/data/git/maibei-backend.git

    海外项⽬boss：https://git.coding.net/lihuangde/UangBagus-console.git
    海外项目api： https://git.coding.net/lihuangde/UangBagus-api.git
    海外项目jobs：https://git.dev.tencent.com/lihuangde/UangBagus-Jobs.git

    牛牛BOSS：https://e.coding.net/lihuangde/niuniu-admin.git
    智投BOSS：https://e.coding.net/lihuangde/jinrizhitou_admin.git
    智投API：https://e.coding.net/lihuangde/jinrizhitou_api.git

    菲律宾的代码，要部署一份到248测试环境
    https://e.coding.net/lihuangde/UangBagus-api-ph.git
    https://e.coding.net/lihuangde/UangBagus-Jobs-ph.git
    https://e.coding.net/lihuangde/UangBagus-cdn-ph.git
    https://e.coding.net/lihuangde/UangBagus-console-ph.git

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

服务器登陆：

    急贷宝 | 掌富贷 | saas

        地址: 59.110.46.55
        账号: root
        密码: 5#H1b&L3#siz*he&lAnm

    saas⻛控服务器 | 51易易借

        地址: 47.94.235.248
        账号: root
        密码: asdf.123456

    海外项⽬（测试）：

        地址: 39.96.161.37
        账号: root
        密码: asdf.123456

    海外项⽬（正式）：

        地址：149.129.251.98
        账号：dev_user01
        密码：15*TB5@1m1$FoN#d4F9
        位置：/srv/console/

    海外项⽬（KSP）：

        地址：149.129.247.105
        账号：dev_user01
        密码：15*TB5@1m1$FoN#d4F9
        位置：/srv/wwwroot/

    智投服务器（测试）：

        地址：47.94.235.248
        账号：root
        密码：asdf@1@23#4$#@!
        路径：/data/wwwroot/zttest/jinrizhitou_admin/

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

skypay的代码（api仓库）

    app/Http/Controllers/SkypayController.php
    app/Helper/functions.php
    app/Service/Bank/Skypay.php

支付通道测试环境后台
    http://test.skypay.ph
    账号: ByteDream
    密码 : ByteDream

菲律宾

GIT
    https://e.coding.net/lihuangde/UangBagus-api-ph.git
    https://e.coding.net/lihuangde/UangBagus-Jobs-ph.git
    https://e.coding.net/lihuangde/UangBagus-cdn-ph.git
    https://e.coding.net/lihuangde/UangBagus-console-ph.git


数据库
    http://47.94.235.248:8088/2phpmyadmin2/
    root
    localR@@T
    数据库 uangbagus_pro


测试服务器
    47.94.235.248
    asdf@1@23#4$#@!

CDN路径 /srv/cdn
    http://phcdn.jiexiangtech.com

API路径 /srv/api
    http://phapi.jiexiangtech.com

BOSS路径 /srv/console
    http://phconsole.jiexiangtech.com

BOSS系统
    http://phconsole.jiexiangtech.com
    账号 admin
    密码 admin123456

任务路径 /srv/jobs
    root用户
        * * * * * /usr/bin/php /srv/jobs/schedule:run >> /home/dev_user01/job.log
    dev_user01 用户
        * * * * * /usr/bin/php /srv/console/artisan schedule:run

    /usr/bin/php /srv/jobs/artisan AutoRiskControlJobs 风控
    /usr/bin/php /srv/jobs/artisan AutoNewRisk 模型分

    /usr/bin/php /srv/jobs/artisan AutoTrackRemindJobs 客服提醒
    /usr/bin/php /srv/jobs/artisan AutoTrackJobs 催收派单
    /usr/bin/php /srv/jobs/artisan AutoPushAndSmsJobs 短信提醒


    产品配置明细
    借款周期10天，利息利率1%，手续费率26%
    逾期罚款利率5%  逾期罚息2%

    借款金额3000p，到手金额2220p，应还金额3300p

    公式1 手续费 = 借款金额 * 手续费率
    公式2 到手金额 = 借款金额 - 手续费
    公式3 应还金额 = 借款金额 + 借款金额 * 利息利率 * 借款天数
    公式4 逾期应还金额 = 应还金额 + 逾期罚款 + 逾期利息 * 逾期天数


    手续费780p，手续费率26%
    手续费 =3000 * 26% = 780
    到手金额 =3000-780 = 2220
    应还金额=3000+3000*1% * 10=3300p （借款周期10天，利息1%，）

    逾期一天 逾期罚款 3000*5%=150，逾期利息3000*2%*1=60
    逾期一天应还 3300+150+60 =3510p

    逾期二天 逾期罚款 3000*5%=150，逾期利息3000*2%*2=120
    逾期二天应还 3300+150+120 =3570p

    根据 loan_order 表中 platform 查询 investment_big_user 表中 channel_id

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

有用的网站：

    17素材：

        https://www.17sucai.com/

    素材牛：

        https://www.sucainiu.com/recharge.html

    懒人图库：

        https://www.lanrentuku.com/

    实用工具：

        https://tool.lu/

    短网址：

        http://url.tool.cc/

    七牛：

        https://sso.qiniu.com/

    腾讯云：

        https://dev.tencent.com/

    阿里云：

        https://account.aliyun.com

    企业邮箱：

        https://exmail.qq.com/

    百度翻译：

        http://api.fanyi.baidu.com/

    极光推送：

        https://www.jiguang.cn/

    163邮箱：

        https://email.163.com

    Mac应用：

        https://xclient.info/

    CSDN：

        https://mp.csdn.net

    GitHub：

        https://github.com/d1270469522

    菜鸟教程：

        https://www.runoob.com/

    PHP中文网：

        https://www.php.cn

    酷壳：

        https://coolshell.cn/featured

    W3school：

        https://www.w3school.com.cn/index.html

    laravel社区：

        https://learnku.com

    laravel学院：

        https://xueyuanjun.com/

    layui文档：

        https://www.layui.com/doc/

    Element资源：

        https://element.eleme.cn/#/zh-CN/resource

    Element组件：

        https://element.eleme.cn/#/zh-CN/component/installation

    vue后台：

        https://panjiachen.github.io/vue-element-admin/#/login?redirect=%2Fdashboard

    vue文档：

        https://panjiachen.github.io/vue-element-admin-site/zh/guide/

    视频转 Gif：

        https://ezgif.com/video-to-gif/ezgif-7-2013b31d0aa7.mp4

    http 转 https：

        https://certbot.eff.org/lets-encrypt/centosrhel7-nginx

    confirm 弹窗：

        https://github.com/craftpip/jquery-confirm

    leetcode 题库：

        https://leetcode-cn.com

    百码云：

        https://www.microeco.net

    laravel-admin 后台文档：

        https://laravel-admin.org

    支付宝沙箱测试：

        https://openhome.alipay.com/platform/appDaily.htm?tab=account

    虚拟 URL：

        http://requestbin.net

    婚礼纪

        https://www.zhizuoh5.com/store/index/type/1.html

    背景音乐

        https://www.tukuppt.com/peiyueso/hunli/m108.html


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

支付宝：

    账号：13051822580
    密码：D********（通用）

腾讯云:

    地址：https://dev.tencent.com
    账号：d1270469522
    密码：D********（通用）

百度云：

    账号：13051822580
    密码：D********（通用）

阿里云：

    账号：天尽头流浪 | 13051822580 | 1270469522@qq.com
    密码：D********（通用）

服务器：

    地址：39.106.191.79
    密码：D********（通用）

华为云：

    账号：tianjintouliulang | 13051822580 | 1270469522@qq.com
    密码：D********（通用）

QQ：

    账号：1270469522
    密码：D********（反转）

GitHub：

    账号：1270469522@qq.com
    密码：D********（通用）

Google:

    账号：d1270469522@gmail.com
    密码：D********（通用）

laravel社区：

    账号：1270469522@qq.com
    密码：D********（通用）

坚果VPN:

    地址：https://nutsvpn.in
    账号：13051822580
    密码：D********（通用）

极光推送：

    地址：https://www.jiguang.cn/
    账号：1270469522@qq.com
    密码：D********（通用）

Oracle：

    地址：https://www.oracle.com/
    账号：1270469522@qq.com
    密码：D********（通用）

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Git 新建仓库，上传远程：

    git init
    git add -A
    git commit -m "Initial commit"
    git remote add origin git@github.com:your_username/hello_laravel.git
    git push -u origin master

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Git 每次拉取的时候，都需输入账号密码

    很简单，只要两步骤就能实现：

    1.在~/.gitconfig目录下多出一个文件，用来记录你的密码和帐号

        git config --global credential.helper store

    2.再最后输入一次正确的用户名和密码，就可以成功的记录下来，这是最后一次麻烦啦！

        git pull

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Git打tag：

    1、列出已有的tag：

        git tag

    2、加上-l命令可以使用通配符来过滤tag：

        git tag -l 'v1.*'

    3、新建tag：git tag v1.0

        还可以加上-a参数来创建一个带备注的tag，备注信息由-m指定。如果你未传入-m则创建过程系统会自动为你打开编辑器让你填写备注信息。

        git tag -a v1.0 -m "my tag"

    4、查看tag详细信息：git show v1.0

    5、给指定的某个commit号加tag

        打tag不必要在head之上，也可在之前的版本上打，这需要你知道某个提交对象的校验和（通过git log获取，取校验和的前几位数字即可）。

        git tag -a v1.2 9fceb02 -m "my tag"

    6、将tag同步到远程服务器

        同提交代码后，使用git push来推送到远程服务器一样，tag也需要进行推送才能到远端服务器。
        使用git push origin [tagName]推送单个分支。

        git push origin v1.0

        推送本地所有tag，使用git push origin --tags。

    7、切换到某个tag

        跟分支一样，可以直接切换到某个tag去。这个时候不位于任何分支，处于游离状态，可以考虑基于这个tag创建一个分支。

        git checkout v.1.2

    8、删除某个tag

        本地删除

        git tag -d v0.1.2

        远端删除
        git push origin :refs/tags/<tagName>

        git push origin :refs/tags/v0.1.2


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Git 版本回退：

    1. 使⽤用 git log 命令历史版本记录回退版本

        git reset --hard f6a7c803a6931a9eca011d4e097389e0845cbe49

    2. 推送到远程git

        git push -f -u origin master

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

（暂存区）作用是将在暂存区的更改文件进行强制撤销

    git add -A
    git checkout -f

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

（未到暂存区）放弃所有文件修改

    git checkout .
    git reset --hard

    单个文件的时候
    检出还原 PagesController：

    $ git checkout app/Http/Controllers/PagesController.php

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

（未到暂存区）放弃所有文件修改

    git clean -f -d

    命令 git clean 作用是清理项目，-f 是强制清理文件的设置，-d 选项命令连文件夹一并清除。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Git放弃修改，强制覆盖本地代码

    git fetch --all
    git reset --hard origin/master
    git pull

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Git 本地新建分支：

    git checkout -b test

Git 把本地新建分支推送远程（创建并推送）：

    git push -u origin test

    （注意：如果远程没有会报错：git push --set-upstream origin test）

Git 删除本地分支：

    git branch -d test

Git 删除远程分支：

    git push origin --delete test

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Git 查看某个文件的修改历史

    1、在git中查看历史的命令主要是git log，要查看某个文件的修改历史可以这样：

        $ git log -- begin.txt

    2、可以添加不同的选项让输出的内容或格式有所不同。

        $ git log -p -- begin.txt

    3、-p 选项可以输出每次提交中的diff， 但个人感觉会把输出搞得很长、很乱，不容易找到重点。
    个人比较喜欢的方式是：

        $ git log --pretty=oneline -- filename

        在log 命令中加入 --pretty=oneline 选项会让结果看起来清爽一些，但是只能看到comments，看不到提交的用户和日期。
        这也能够让我们集中注意力快速找到关注的提交记录。

    4、然后使用 git show命令查看完整的提交内容。


Git 查看历史中的文件内容

    1、当我们使用 git log 命令找到了某次提交，并且想看看这次提交时文件的完整内容。
       这时，我们需要使用 git show 命令：

        $ git show xxxxx:filename

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

git stash

    参考：https://www.cnblogs.com/tocy/p/git-stash-reference.html

    发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑 git stash。

    1、git stash（stash 当前修改）

        会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，用于后续恢复当前工作目录。
        需要说明一点，stash 是本地的，不会通过 git push 命令上传到g it server 上。
        实际应用中推荐给每个 stash 加一个 message，用于记录版本，
        使用 git stash save取代git stash命令。示例如下：

        $ git stash save "test-cmd-stash"

    2. 重新应用缓存的 stash

        git stash pop

        可以通过 git stash pop 命令恢复之前缓存的工作目录
        这个指令将缓存堆栈中的第一个 stash 删除，并将对应修改应用到当前的工作目录下。

        git stash apply

        你也可以使用 git stash apply 命令，将缓存堆栈中的 stash 多次应用到工作目录中，但并不删除 stash 拷贝。
        在使用 git stash apply 命令时可以通过名字指定使用哪个 stash，默认使用最近的 stash（即 stash@{0}）。

    3. 查看现有 stash

        git stash list

        可以使用 git stash list 命令，一个典型的输出如下：
        $ git stash list
        stash@{0}: WIP on master: 049d078 added the index file
        stash@{1}: WIP on master: c264051 Revert "added file_size"
        stash@{2}: WIP on master: 21d80a5 added number to log

    4. 移除 stash

        git stash drop

        可以使用 git stash drop 命令，后面可以跟着 stash 名字。下面是一个示例：
        $ git stash drop stash@{0}
        Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)

        git stash clear

        或者使用git stash clear命令，删除所有缓存的stash。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Sublime相关插件，快捷键：

    Sublime Txt 基础配置
    {
        "always_show_minimap_viewport": true,
        "draw_minimap_border": true,
        "ensure_newline_at_eof_on_save": true,
        "find_selected_text": true,
        "font_size": 15,
        "highlight_line": true,
        "highlight_modified_tabs": true,
        "ignored_packages":
        [
            "Vintage"
        ],
        "line_padding_top": 0,
        "show_line_endings": true,
        "translate_tabs_to_spaces": true,
        "trim_trailing_white_space_on_save": true
    }

    插件：

    教程：https://learnku.com/docs/laravel-development-environment/6.x/editor-selection/5513

    Alignment 

        功能：”=”号对齐，多行选择和多项选择超简单的对齐。
        简介：变量定义太多，长短不一，可一键对齐
        使用：默认快捷键Ctrl+Alt+A和QQ截屏冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A；先选择要对齐的文本

    Bracket Highlighter

        功能：代码匹配
        简介：可匹配[], (), {}, “”, ”, <tag></tag>，高亮标记，便于查看起始和结束标记
        使用：点击对应代码即可
        自定义：http://www.360doc.com/content/14/1111/15/15077656_424301780.shtml（颜色）

    Doc​Blockr

        功能：生成优美注释
        简介：标准的注释，包括函数名、参数、返回值等，并以多行显示，手动写比较麻烦
        使用：输入/*、/**然后回车，还有很多用法，请参照 https://sublime.wbond.net/packages/DocBlockr

        {
            "jsdocs_extra_tags":["@Author 你的名字","@DateTime {{datetime}}"]
        }

    ConvertToUTF8

        功能：文件转码成utf-8
        简介：通过本插件，您可以编辑并保存目前编码不被 Sublime Text 支持的文件，特别是中日韩用户使用的 GB2312，GBK，BIG5，EUC-KR，EUC-JP ，ANSI等。
        使用：安装插件后自动转换为utf-8格式

    AutoFileName

        功能：快捷输入文件名，自动完成文件路径
        简介：自动完成文件名的输入，如图片选取
        使用：输入”/”即可看到相对于本项目文件夹的其他文件

    Trailing Spaces

        功能：检测并一键去除代码中多余的空格，高亮尾部的空格，并在瞬间将其删除。
        简介：发现多余空格、一键删除空格、保存时自动删除多余空格，让你的代码规范清爽起来
        使用：安装插件并重启，即可自动提示多余空格。

            修改配置：保存的时候自动删除
            "trailing_spaces_trim_on_save": true,

        一键删除多余空格：CTRL+SHITF+T（需配置），更多配置请点击标题。
        快捷键配置：在Preferences / Key Bindings – User加上代码（数组内）

            {"keys":["ctrl+shift+t"],"command":"delete_trailing_spaces"}

    SideBarEnhancements

        功能说明：侧栏菜单扩充功能。

    SublimeCodeIntel

        SublimeCodeIntel 作为一个代码提示和补全插件，是 Sublime Text 自带代码提示功能基础上一个更好的扩展，
        自带代码提示功能只可提示系统代码，而SublimeCodeIntel则可以提示用户自定义代码。
        SublimeCodeIntel支持跳转到变量、函数定义的功能，另外还有自动补全的功能，十分方便。

    All Autocomplete

        自动补全变量等
        Sublime Text 默认的 Autocomplete 功能只考虑当前的文件，而 AllAutocomplete 插件会搜索所有打开的文件来寻找匹配的提示词。

    SCSS
        使用说明：支持SCSS语法高亮

    LESS
        使用说明：支持less语法高亮


    ApplySyntax          快速检测语法。
    EditorConfig         编码格式

    ctags     方法跳转

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Mac本地开发环境：

    Apache 服务：

        编辑内容：sudo vim /etc/apache2/httpd.conf
        重新启动：sudo apachectl restart

    Mac 安装 nginx：

        https://www.cnblogs.com/meng1314-shuai/p/8335140.html

    Mac 下 nginx 重启：（版本替换成自己的）

        /usr/local/Cellar/nginx/1.17.1/bin/nginx -s reload

    Mac 下 nginx 配置：

        /usr/local/etc/nginx/servers

    Mac 终端 oh-my-zsh 配置：

        https://www.jianshu.com/p/64344229778a

    Mac 配置的环境变量才生效：

        source ~/.bash_profile

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Mac本地开发环境：（Nginx）

    参考：https://www.cnblogs.com/meng1314-shuai/p/8335140.html

    1、打开终端，习惯性命令：

        brew update

    2、查询要安装的软件是否存在：

        brew search nginx

    3、这里我们多执行一步“废”命令，不过有利于我们后面的配置：

        brew info nginx

        Not installed：nginx 在本地还未安装
        From：nginx 的来源
        Docroot：默认为 /usr/local/var/www，
        在/usr/local/etc/nginx/nginx.conf 配置文件中默认端口被配置为8080从而使nginx运行时不需要加 sudo，
        nginx将在/usr/local/etc/nginx/servers/目录中加载所有文件，以及我们可以通过最简单的命令 'nginx' 来启动nginx。

    4、正式开始安装：

        brew install nginx

    5、查看 nginx 安装目录（是否如info所说）：　

        open /usr/local/etc/nginx/    // 配置目录

        open /usr/local/Cellar/nginx  // 安装目录

    6、启动nginx，终端输入如下命令：

        nginx

    7、nginx的配置文件吧（nginx.conf）:

        vim /usr/local/etc/nginx/nginx.conf

        http 里面增加：

            # 开启目录文件列表
            autoindex on;
            # 显示出文件的确切大小，单位是bytes
            autoindex_exact_size off;
            # 显示的文件时间为文件的服务器时间
            autoindex_localtime on;
            #设置字符集
            charset utf-8,gbk;

    8、server 配置：

        server {
            .
            .
            .

            location / {
                root   /Users/zhangsan/projects/;
                index index.php index.html index.htm;
            }
            .
            .
            .
            location ~ \.php$ {
                root           /Users/zhangsan/projects/;
                fastcgi_pass   127.0.0.1:9000;
                fastcgi_index  index.php;
                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
                include        fastcgi_params;
            }
            .
            .
            .
        }

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Mac本地开发环境：（php-fpm）

    Mac 配置 php-fpm 时出现'/private/etc/php-fpm.conf': No such file or directory (2)

    参考：https://www.cnblogs.com/lilei9110/p/6255877.html

    1、Mac 自带 php-fpm，在终端执行 php-fpm，会报如下错误：

        ERROR: failed to open configuration file '/private/etc/php-fpm.conf': No such file or directory (2)
        ERROR: failed to load configuration file '/private/etc/php-fpm.conf'
        ERROR: FPM initialization failed

    2、错误信息显示，不能打开配置文件，cd /private/etc，发现没有 php-fpm.conf 文件，但是有 php-fpm.conf.default 文件。这个文件是默认配置，我们可以复制一份，改名为 php-fpm.conf，然后再根据需要改动配置。

        cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf

    3、执行 php-fpm，再次报错：

        ERROR: failed to open error_log (/usr/var/log/php-fpm.log): No such file or directory (2)
        ERROR: failed to post process the configuration
        ERROR: FPM initialization failed

    4、错误信息显示，不能打开错误日志文件。cd /usr/var/log 发现根本没有这个目录，甚至连 var 目录都没有，加上为了避免权限问题，干脆配置到 /usr/local/var/log 目录。

        修改 php-fpm.conf error_log 配置为 /usr/local/var/log/php-fpm.log，并把 user 和 group 改为和当前用户一样。

    5、执行 php-fpm，再次报错：

        NOTICE: [pool www] 'user' directive is ignored when FPM is not running as root
        NOTICE: [pool www] 'group' directive is ignored when FPM is not running as root

    6、于是 sudo php-fpm，再次报错：

        ERROR: unable to bind listening socket for address '127.0.0.1:9000': Address already in use (48)
        ERROR: FPM initialization failed

    7、编辑 php-fpm.conf，修改 listen 为 127.0.0.1:9999。

    执行 php-fpm -t，这个世界终于清净了！

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

php-fpm 在mac 中重启方式

    1、查看php-fpm端口是否在被php-fpm使用

        sudo lsof -i:9000

    2、一般修改 php.ini 文件后经常需要重启php-fpm

        sudo  killall  php-fpm   关闭

    3、再输入 sudo lsof -i:9000 就会发现php-fpm没有打印对应端口

        sudo  php-fpm    重启

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Mac 生成 SSH Key:

    1、请将 your_email@example.com 替换为你的邮箱：

        > ssh-keygen -t rsa -C "1270469522@qq.com"
        Generating public/private rsa key pair.

    2、命令行会提示让你指定秘钥的名称，按回车键将 SSH Key 保存到默认文件名即可：

        Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]

    3、接下来会询问你为 SSH Key 设置密码，按回车键即可，默认为空密码：

        Enter passphrase (empty for no passphrase): [Type a passphrase]
        Enter same passphrase again: [Type passphrase again]

    4、可以都选择默认，也就是直接敲击几个 Enter 键即可。这时候我们再检查一下：

        > ls -al ~/.ssh

    5、可以看到以下两个文件：

        id_rsa —— SSH 秘钥的 私钥 (Private Key)
        id_rsa.pub —— SSH 秘钥的 公钥 (Public Key)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Mac ssh 自动登陆设置：


    1.首先找到 .ssh 目录 一般在用户名（～）目录下。

        ls -a查看，如果没有就重新创建一个

    2.然后在 .ssh目录下创建文件 config 文件

        touch config

    通过vim打开config文件

        vim config

    格式如下

        Host test              #别名 ssh+别名运行即可
        HostName 88.16.120.2   #ip地址
        User u1                #用户名
        Port 22                #端口号

        Host test2
        HostName 12.96.120.13
        User u2
        Port 22

    3.输入 ssh test

        会提示输入服务器的密码输入即可。

    4.在本地的 .ssh 文件下创建密钥，生成一次即可（有的话，不生成）

        方法如下

        ssh-keygen  #生成了rsa密钥 和公钥

    5.把公钥传入到服务器，每登陆一台机器传输一次

        ssh-copy-id  -i ~/.ssh/id_rsa.pub test

        传公钥的时候输入一次密码。

    6.以后直接

        ssh test

        就可以登陆了。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

RSA 密钥的生成

    1、Mac 端打开终端 输入如下命令

        openssl

    2、使用openssl 生成SK (private_key)

        genrsa -out rsa_private_key.pem 1024

    3、使用openssl 生成PK (public_key)

        rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

修改表名：

    TO 或AS都可以，也以省略掉

    ALTER TABLE user111 RENAME TO user222;

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

nginx启动错误：

    登陆服务器之后进到nginx使用./nginx -s reload重新读取配置文件
    发现报nginx: [error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)错误，

    　　[root@localhost sbin]# ./nginx -s reload
    　　nginx: [error] open() "/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)

    解决方法：

    　　[root@localhost nginx]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf
        使用nginx -c的参数指定nginx.conf文件的位置

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

composer 无法在root下运行

    [root@123 download]# useradd dong
    [root@123 download]# passwd dong

    然后切换用户

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Linux 下全局安装 composer 方法

    1、下载 composer

        curl -sS https://getcomposer.org/installer | php

    2、将 composer.phar 文件移动到 bin 目录以便全局使用 composer 命令

        mv composer.phar /usr/local/bin/composer

    3、切换国内源

        composer config -g repo.packagist composer https://packagist.phpcomposer.com

    4、输入 composer 验证：
           ______
          / ____/___  ____ ___  ____  ____  ________  _____
         / /   / __ \/ __ `__ \/ __ \/ __ \/ ___/ _ \/ ___/
        / /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /
        \____/\____/_/ /_/ /_/ .___/\____/____/\___/_/
                            /_/
        Composer version 1.9.1 2019-11-01 17:20:17

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

composer 执行内存超出问题解决

    解决办法：

    1、修改 php.ini

        修改 php.ini 中 memory_limit 配置，但是需要相关的权限服务器操作权限。
        可以通过这个命令：php -r “echo ini_get(‘memory_limit’).PHP_EOL;” 查看设置是否生效。

    2、使用命令

        直接使用命令 php -d memory_limit=-1 `which composer` update/install -vvv， 去掉内存限制。
        当然也可以指定固定大小如：php -d memory_limit=1024 `which composer` update/install -vvv。

    附：（使用命令的时候，根据自身情况酌情修改）

        php -d memory_limit=4096M `which composer` require overtrue/laravel-query-logger --dev -vvv

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

sudo

    在使用 sudo 命令时，经常性会提示出 "不在 sudoers 文件中。此事将被报告" 的错误信息。

    这是因为当前登录的账号不在 sudo 权限里面。

    sudo 命令可以让你以 root 身份执行命令，来完成一些我们这个帐号完成不了的任务。

    其实并非所有用户都能够执行sudo，因为有权限的用户都在 /etc/sudoers 中。

    接下来，需要做的要求 root 用户或者管理员进行权限赋予即可。

    打开 sudoer s后，像如下那样加上自己的帐号保存后就 OK 了：

        # User privilege specification
        root        ALL=(ALL:ALL) ALL
        username    ALL=(ALL:ALL) ALL

    sudoer s的权限是 0440，即只有 root 才能读。在你用 root 或 sudo 后强行保存（wq!）即可.

    由于 root 用户很多情况下不会交由个人管理，因此需要管理员进行授权操作。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记

    执行 seeder 命令出现 class *** does not exist

    我已经确保

        seeder文件和全局database seeder是在同一个seeder目录下
        在DatabaseSeeder的run方法里

        $this->call(RolesAndPermissionsSeeder::class)

    仍然会出现这个问题的原因是 我们需要清理下之前执行生成的classmap信息。

    在控制台中执行`composer dump-autoload`,然后再执行`php artisan db:seed`.

    Ok，完美解决。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（Artisan 命令）

    php artisan key:generate     生成 App Key
    php artisan make:controller  生成控制器
    php artisan make:model       生成模型
    php artisan make:policy      生成授权策略
    php artisan make:seeder      生成 Seeder 文件
    php artisan migrate          执行迁移
    php artisan migrate:rollback 回滚迁移
    php artisan migrate:refresh  重置数据库
    php artisan db:seed          填充数据库
    php artisan tinker  进入      tinker 环境
    php artisan route:list       查看路由列表

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（Artisan 命令）

    如果需要在创建模型的同时顺便创建数据库迁移，则可以使用 --migration 或 -m 选项

    php artisan make:model Models/Article -m

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（Artisan 命令）

    migrate:refresh 命令来重置数据库，之后再使用 db:seed 执行数据填充。

    如果我们要单独指定执行 UserTableSeeder 数据库填充文件，则可以这么做：

    $ php artisan migrate:refresh
    $ php artisan db:seed --class=UsersTableSeeder

    你也可以使用下面一条命令来同时完成数据库的重置和填充操作：

    $ php artisan migrate:refresh --seed

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（Artisan 命令）

    [添加字段]
    在生成迁移文件时，带上 --table 选项可以为指定数据表生成迁移文件。现在，让我们运行下面命令来为用户表新增管理员字段。

    $ php artisan make:migration add_is_admin_to_users_table --table=users

    [新增表]
    我们需要为粉丝关系表生成一个迁移文件。

    $ php artisan make:migration create_followers_table --create="followers"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（Artisan 命令）

    可以使用以下命令来新建一个中间件：

    $ php artisan make:middleware EnsureEmailIsVerified

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（rest风格路由）

    Route::resource('users', 'UsersController');

    上面代码将等同于：

    Route::get('/users', 'UsersController@index')->name('users.index');
    Route::get('/users/create', 'UsersController@create')->name('users.create');
    Route::get('/users/{user}', 'UsersController@show')->name('users.show');
    Route::post('/users', 'UsersController@store')->name('users.store');
    Route::get('/users/{user}/edit', 'UsersController@edit')->name('users.edit');
    Route::patch('/users/{user}', 'UsersController@update')->name('users.update');
    Route::delete('/users/{user}', 'UsersController@destroy')->name('users.destroy');

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（blade语法）

    Blade 支持所有的循环语句和条件判断语句，如 @if, @elseif, @else, @for, @foreach, @while 等等，
    应用在 Blade 中的表达式都需要以 @ 开头。

    Laravel 授权策略提供了 @can Blade 命令，允许我们在 Blade 模板中做授权判断

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（blade语法）

    在调用 paginate 方法获取用户列表之后，便可以通过以下代码在用户列表页上渲染分页链接。

    {!! $users->render() !!}

    由 render 方法生成的 HTML 代码默认会使用 Bootstrap 框架的样式，
    渲染出来的视图链接也都统一会带上 ?page 参数来设置指定页数的链接。
    另外还需要注意的一点是，渲染分页视图的代码必须使用 {!! !!} 语法，而不是 {{　}}，这样生成 HTML 链接才不会被转义。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（CSRF）

    在我们使用 POST 方法提交表单时，Laravel 为了安全考虑，
    会让我们提供一个 token（令牌）来防止我们的应用受到 CSRF（跨站请求伪造）的攻击。

    第一种：
    {{ csrf_field() }}

    上面这段代码转换为 HTML 如下所示：

    <input type="hidden" name="_token" value="fhcxqT67dNowMoWsAHGGPJOAWJn8x5R5ctSwZrAq">

    第二种：
    <meta name="csrf-token" content="{{ csrf_token() }}">

    csrf-token 标签是为了方便前端的 JavaScript 脚本获取 CSRF 令牌。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（语言包）

    接下来让我们使用 Composer 来安装 laravel-lang（语音包）。
    https://github.com/overtrue/laravel-lang/blob/master/README_CN.md

    composer require "overtrue/laravel-lang:~3.0"

    安装成功后，在 config/app.php 文件中将以下这一行：

    Illuminate\Translation\TranslationServiceProvider::class,

    替换为：

    Overtrue\LaravelLang\TranslationServiceProvider::class,

    最后，我们还需要将项目语言设置为中文。

    config/app.php

        'locale' => 'zh-CN',

    Laravel Lang 同自定义语言包一样，都是根据 config/app.php 里 locale 的选项来选择语言的。

    值得一提的是，如果你想修改扩展包提供的语言文件，可以使用以下命令发布语言文件到项目里：

    $ php artisan lang:publish zh-CN


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（Debugbar 调试）

    此刻我们的页面存在很大的 性能隐患，为了能更直观地看到问题，我们先安装 Laravel 开发者工具类 - laravel-debugbar。
    安装 Debugbar

    使用 Composer 安装：

    $ composer require "barryvdh/laravel-debugbar:~3.2" --dev

    最后 Composer 安装时 --dev 参数是指明只在 开发环境 中使用，
    这样上线代码到 生产环境 时，我们可使用 composer install --no-dev 命令来排除这些扩展包的安装。

    生成配置文件，存放位置 config/debugbar.php：

    $ php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"

    打开 config/debugbar.php，将 enabled 的值设置为：

    'enabled' => env('APP_DEBUG', false),

    修改完以后，Debugbar 分析器的启动状态将由 .env 文件中 APP_DEBUG 值决定。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（refresh 和 fresh）

    用过 migrate:refresh 命令的人就知道，它不仅会回滚数据库的所有迁移，还会接着运行 migrate 命令。
    这对程序早期开发过程中对重建数据库有需求的人能起到很大的帮助。

    Laravel 5.5 对此作了改进，创建了一个新的命令：migrate:fresh。
    refresh 和 fresh 之间的区别在于，fresh 是跳过了所有的 down () 方法或者回滚，
    直接删除了所有的表，再运行 up () 方法重建数据库。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（时间友好显示）

    $status->created_at->diffForHumans()

    该方法的作用是将日期进行友好化处理，我们可以使用 tinker 来查看该方法的具体输出情况。

    $ php artisan tinker

    在 tinker 中输出第一位用户的创建时间如下。

    >>> $created_at = App\Models\User::first()->created_at
    => Carbon\Carbon {#704
         +"date": "1998-12-06 03:15:31.000000",
         +"timezone_type": 3,
         +"timezone": "UTC",
       }

    在 tinker 中调用 diffForHumans 方法来输出，结果如下。

    >>> $created_at->diffForHumans()
    => "17年前"

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（注册脚手架）

    Laravel 自带了用户认证功能，我们将利用此功能来快速构建我们的用户中心。

    首先执行认证脚手架命令，生成代码：

    $ php artisan ui:auth

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（验证码）

    我们将以第三方扩展包 mews/captcha 作为基础来实现 Laravel 中的验证码功能。

    使用 Composer 安装：

    $ composer require "mews/captcha:~3.0"

    运行以下命令生成配置文件 config/captcha.php：

    $  php artisan vendor:publish --provider='Mews\Captcha\CaptchaServiceProvider'

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（throttle频率限制）

    $this->middleware('throttle:6,1')->only('verify', 'resend');

    对 verify 和 resend 动作做了频率限制，throttle 中间件是框架提供的访问频率限制功能，
    throttle 中间件会接收两个参数，这两个参数决定了在给定的分钟数内可以进行的最大请求数。
    在这个例子中，我们限定了这两个动作访问频率是 1 分钟内不能超过 6 次。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记 表单请求验证（FormRequest）

    表单请求验证（FormRequest） 是 Laravel 框架提供的用户表单数据验证方案，
    此方案相比手工调用 validator 来说，能处理更为复杂的验证逻辑，更加适用于大型程序。
    在本课程中，我们将统一使用 表单请求验证来处理表单验证逻辑。

    接下来我们创建 UserRequest ，使用以下命令：

    $ php artisan make:request UserRequest

    执行成功后会生成以下文件：

    app/Http/Requests/UserRequest.php

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记 （.env新增变量）

    每当我们在 .env 中新增键值时，都必须在 .env.example 文件中新增相应的键：

    BAIDU_TRANSLATE_APPID=
    BAIDU_TRANSLATE_KEY=

    因为 .env 文件被我们排除 Git 跟踪（可以查看 .gitignore 文件），
    文件 .env.example 是作为项目环境变量的初始化文件而存在。
    当项目在新环境中安装时，只需要执行 cp .env.example .env 命令，
    并在 .env 填入对应的值，即可完成对项目环境变量的配置

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记 （app容器）

    $topic->slug = app(SlugTranslateHandler::class)->translate($topic->title);
    app() 允许我们使用 Laravel 服务容器 ，此处我们用来生成 SlugTranslateHandler 实例。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记 （路由参数可选）

    Route::get('topics/{topic}/{slug?}', 'TopicsController@show')->name('topics.show');

    URI 参数 topic 是 『隐性路由模型绑定』 的提示，将会自动注入 ID 对应的话题实体。

    URI 最后一个参数表达式 {slug?} ，? 意味着参数可选，这是为了兼容我们数据库中 Slug 为空的话题数据。这种写法可以同时兼容以下两种链接：

    http://larabbs.test/topics/115
    http://larabbs.test/topics/115/slug-translation-test

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记 （消息通知系统）

    Laravel 自带了一套极具扩展性的消息通知系统，尤其还支持多种通知频道，我们将利用此套系统来向用户发送消息提醒。
    什么是通知频道？

    通知频道是通知传播的途径，Laravel 自带的有数据库、邮件、短信（通过 Nexmo）以及 Slack。本章节中我们将使用数据库通知频道，后面也会使用到邮件通知频道。
    1. 准备数据库

    数据通知频道会在一张数据表里存储所有通知信息。包含了比如通知类型、JSON 格式数据等描述通知的信息。我们后面会通过查询这张表的内容在应用界面上展示通知。但是在这之前，我们需要先创建这张数据表，Laravel 自带了生成迁移表的命令，执行以下命令即可：

    $ php artisan notifications:table

    2. 生成通知类

    Laravel 中一条通知就是一个类（通常存在 app/Notifications 文件夹里）。看不到的话不要担心，运行一下以下命令即可创建：

    $ php artisan make:notification TopicReplied

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

PHP 扩展 fileinfo

    1、查找 fileinfo

        [root@linux /]# find / -name fileinfo
        /usr/local/src/php-7.3.12/ext/fileinfo

    2、进入目录

        [root@linux /]# cd /usr/local/src/php-7.3.12/ext/fileinfo

    3、查找 phpize

        [root@linux fileinfo]# find / -name phpize
        /usr/local/php/bin/phpize
        /usr/local/src/php-7.3.12/scripts/phpize

    4、初始化扩展安装

        [root@linux fileinfo]# /usr/local/php/bin/phpize
        Configuring for:
        PHP Api Version:         20180731
        Zend Module Api No:      20180731
        Zend Extension Api No:   320180731

    5、生成编译配置

        [root@linux fileinfo]# ./configure --with-php-config=/usr/local/php/bin/php-config

    6、编译并安装

        [root@linux fileinfo]# make && make install

    7、修改 php.ini

        extension=fileinfo.so

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

PHP 扩展 phpredis

    1、官网下载 redis 扩展压缩包

        http://pecl.php.net/package/redis
        上传到你的服务器（我下载的是 redis-5.2.0）

    2、进入目录

        [root@linux /]# cd /usr/local/src/redis-5.2.0

    3、查找 phpize（你的 PHP 配置）

        [root@linux redis-5.2.0]# find / -name phpize
        /usr/local/php/bin/phpize
        /usr/local/src/php-7.3.12/scripts/phpize

    4、初始化扩展安装

        [root@linux redis-5.2.0]# /usr/local/php/bin/phpize
        Configuring for:
        PHP Api Version:         20180731
        Zend Module Api No:      20180731
        Zend Extension Api No:   320180731

    5、生成编译配置

        [root@linux redis-5.2.0]# ./configure --with-php-config=/usr/local/php/bin/php-config

    6、编译并安装

        [root@linux redis-5.2.0]# make && make install

    7、修改 php.ini

        extension=redis.so

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Linux 安装 redis

    1、官网下载 redis 压缩包

        http://download.redis.io/releases
        上传到你的服务器（我下载的是 redis-5.0.9）

    2、进入目录

        [root@linux /]# cd /usr/local/src/redis-5.0.9

    3、编译

        [root@linux redis-5.0.9]# make

        [root@linux redis-5.0.9]# make install PREFIX=/usr/local/redis

    4、复制配置文件

        [root@linux redis-5.0.9]# cp redis.conf /usr/local/redis/bin

    5、启动 redis

        进入 bin 目录

            [root@linux redis-5.0.9]# cd /usr/local/redis/bin

        5.1 前端启动

            [root@linux redis]# ./redis-server

        5.2 后端启动

            编辑 redis.conf

            [root@linux redis]# vim redis.conf

            把 deamonize no 改成 yes

            [root@linux redis]# ./redis-server ./redis.conf

            查看启动进程:(挂载配置文件）

            [root@linux redis]# ps -ef | grep -i redis

    6、启动示例

                        _._
                   _.-``__ ''-._
              _.-``    `.  `_.  ''-._           Redis 5.0.9 (00000000/0) 64 bit
          .-`` .-```.  ```\/    _.,_ ''-._
         (    '      ,       .-`  | `,    )     Running in standalone mode
         |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379
         |    `-._   `._    /     _.-'    |     PID: 15396
          `-._    `-._  `-./  _.-'    _.-'
         |`-._`-._    `-.__.-'    _.-'_.-'|
         |    `-._`-._        _.-'_.-'    |           http://redis.io
          `-._    `-._`-.__.-'_.-'    _.-'
         |`-._`-._    `-.__.-'    _.-'_.-'|
         |    `-._`-._        _.-'_.-'    |
          `-._    `-._`-.__.-'_.-'    _.-'
              `-._    `-.__.-'    _.-'
                  `-._        _.-'
                      `-.__.-'


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

编译安装内存不足

    virtual memory exhausted: Cannot allocate memory，开启swap内存交换空间即可解决。

    1、先用free -m查看是否有swap空间：

        [root@linux /]# free -m
                      total        used        free      shared  buff/cache   available
        Mem:            990         352         439          54         199         442
        Swap:             0           0           0

        Swap: 0 0 0 如果这行是这样的情况可以往下走

    2、创建用于交换分区的文件

        [root@linux /]# dd if=/dev/zero of=/mnt/swap bs=1M count=2048
        记录了2048+0 的读入
        记录了2048+0 的写出
        2147483648字节(2.1 GB)已复制，18.4505 秒，116 MB/秒

    3、设置交换分区文件

        [root@linux /]# mkswap /mnt/swap
        正在设置交换空间版本 1，大小 = 2097148 KiB
        无标签，UUID=92a508e6-944e-4d74-8c94-441c8c96a255

    4、立即启用交换分区文件

        [root@linux /]# swapon /mnt/swap
        swapon: /mnt/swap：不安全的权限 0644，建议使用 0600。

    5、查看 /etc/rc.local

        如果在/etc/rc.local中有swapoff -a 需要修改为swapon -a, 没有的话忽略即可。

        [root@linux /]# cat /etc/rc.local
        #!/bin/bash
        # THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES
        #
        # It is highly advisable to create own systemd services or udev rules
        # to run scripts during boot instead of using this file.
        #
        # In contrast to previous versions due to parallel execution during boot
        # this script will NOT be run after all other services.
        #
        # Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure
        # that this script will be executed during boot.

        touch /var/lock/subsys/local
        swapoff -a

    附录：

    1. 关闭删除分区

        swapoff /mnt/swap
        rm /mnt/swap

    2、设置开机时自启用swap分区

        需要修改文件 /etc/fstab 中的 swap 行，如果没有增加一行即可。
        添加 /mnt/swap swap swap defaults 0 0

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

HTTP 正确使用状态码

    HTTP 提供了丰富的状态码供我们使用，正确的使用状态码可以让响应数据更具可读性。

    200 OK - 对成功的 GET、PUT、PATCH 或 DELETE 操作进行响应。也可以被用在不创建新资源的 POST 操作上
    201 Created - 对创建新资源的 POST 操作进行响应。应该带着指向新资源地址的 Location 头
    202 Accepted - 服务器接受了请求，但是还未处理，响应中应该包含相应的指示信息，告诉客户端该去哪里查询关于本次请求的信息
    204 No Content - 对不会返回响应体的成功请求进行响应（比如 DELETE 请求）
    304 Not Modified - HTTP 缓存 header 生效的时候用
    400 Bad Request - 请求异常，比如请求中的 body 无法解析
    401 Unauthorized - 没有进行认证或者认证非法
    403 Forbidden - 服务器已经理解请求，但是拒绝执行它
    404 Not Found - 请求一个不存在的资源
    405 Method Not Allowed - 所请求的 HTTP 方法不允许当前认证用户访问
    410 Gone - 表示当前请求的资源不再可用。当调用老版本 API 的时候很有用
    415 Unsupported Media Type - 如果请求中的内容类型是错误的
    422 Unprocessable Entity - 用来表示校验错误
    429 Too Many Requests - 由于请求频次达到上限而被拒绝访问


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

patch 与 put 的区别为：

    put 替换某个资源，需提供完整的资源信息；
    patch 部分修改资源，提供部分资源信息。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

测试号信息

    appID  wxe0ce018bd20554c7
    appsecret  7acd5afe1b84026aae33b52aab81c6d4

开发者工具 获取code

    https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxe0ce018bd20554c7&redirect_uri=http://larabbs.test&response_type=code&scope=snsapi_userinfo&state=STATE#wechat_redirect

    注意链接中有几个变量需要替换

        APPID 测试账号中的 appID，填写自己账号的 appID
        REDIRECT_URI 用户同意授权后的回调地址，填写 http://larabbs.test
        SCOPE 应用授权作用域，填写 snsapi_userinfo
        STATE 随机参数，可以不填，我们保持 STATE 即可。


请求以下链接获取 access_token：

    https://api.weixin.qq.com/sns/oauth2/access_token?appid=wxe0ce018bd20554c7&secret=7acd5afe1b84026aae33b52aab81c6d4&code=081cvJnG1kTeZ50L0dkG1NDTnG1cvJnK&grant_type=authorization_code

    需要替换的变量

        APPID 测试账号中的 appID，填写自己账号的 appID
        SECRET 测试账号中的 secret，填写自己账号的 secret
        code 上一步获取的 code

    使用 PostMan 访问该链接，获取到了 access_token，注意微信同时返回了 open_id，微信 access_token 和 open_id 一起请求用户信息。

通过 access_token 获取个人信息

    https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID&lang=zh_CN

    替换链接中的 ACCESS_TOKEN 和 OPENID，使用 PostMan 访问

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Laravel 笔记（计划任务）

    在过去，开发者必须为每个需要调度的任务生成单独的 Cron 项目。然而令人头疼的是任务调度不受版本控制，并且需要 SSH 到服务器上来增加 Cron 条目。

    Laravel 命令调度器允许你在 Laravel 中对命令调度进行清晰流畅的定义，并且仅需要在服务器上增加一条 Cron 项目即可。
    调度在 app/Console/Kernel.php 文件的 schedule 方法中定义。
    在该方法内包含了一个简单的例子，你可以随意增加调度到 Schedule 对象中。

    使用调度器时，我们需要修改系统的 Cron 计划任务配置信息，运行以下命令：

    $ export EDITOR=vi && crontab -e

    复制下面这一行：

    * * * * * php /home/vagrant/Code/larabbs/artisan schedule:run >> /dev/null 2>&1

    此时进入 VI 编辑器界面：

        按大写的 G （或者按方向键）将光标移动到最底端；
        然后按键盘上的 『小写 o 键』进入 INSERT 模式；
        黏贴上面这一行；
        黏贴成功后按下键盘左上角的『ESC 键』进入 VI 的命令模式；
        键盘输入 :wq 并敲击回车键保存退出。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Linux 修改主机名

    1.查看当前的主机名

        [root@localhost datas]# hostname
        localhost
        [root@localhost datas]# hostnamectl
           Static hostname: localhost.localdomain
        Transient hostname: localhost
                 Icon name: computer-vm
                   Chassis: vm
                Machine ID: f1d9ecb6c6bd4e02b58e19bba402056c
                   Boot ID: 91603e0798814b54a928e70fd2a2754f
            Virtualization: vmware
          Operating System: CentOS Linux 7 (Core)
               CPE OS Name: cpe:/o:centos:centos:7
                    Kernel: Linux 3.10.0-693.el7.x86_64
              Architecture: x86-64

    2.修改主机名

        修改配置文件 /etc/hostname 保存退出

        [root@localhost /]# vi /etc/hostname

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

理解 Import 和 Export

    上面的代码中使用到了 Export/Import，对于不熟悉 JS 的同学可能会感到陌生，export 和 import 是构成模块功能主要由两个命令：

        export 命令用于规定模块的对外接口；
        import 命令用于输入其他模块提供的功能。

    一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。
    如果你希望外部能够读取模块内部的某个变量，就必须使用 export 关键字输出该变量；
    使用 export 命令定义了模块的对外接口以后，其他 JS 文件就可以通过 import 命令加载这个模块。

    简单的说 export 用于定义一个模块，import 用于引入一个模块。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Nginx 服务器默认不支持 pathinfo

    如果出现错误可以使用下面方法：【模块不存在:admin.php】

    在需要 pathinfo 支持的程序中(如thinkphp),则无法支持 '/index.php/Home/Index/index' 这种网址.

    典型配置

        location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $DOCUMENT_ROOT$fastcgi_script_name;
            include        fastcgi_params;
        }

    支持pathinfo

        location ~ \.php(.*)$ { # 正则匹配.php后的 pathinfo 部分
            root html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME  $DOCUMENT_ROOT$fastcgi_script_name;
            fastcgi_param  PATH_INFO $1;   # 把 pathinfo 部分赋给 PATH_INFO 变量
            include        fastcgi_params;
        }

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Mac 本机安装 PHP

    1、php -v

    2、下载对应版本

    3、进入 pcntl

    4、phpize

        执行phpize中出现Cannot find autoconf.错误
        解决方法也很简单，安装个autoconf即可。

        brew install autoconf
        brew install m4

    5、configure

        fatal error: 'php.h' file not found 错误的解决办法

        解决办法如下：

        sudo ln -s /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include /usr/include

        这里注意一下，你使用的系统版本号。

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

laravel-shop 部署到线上出现的问题

    参考：https://blog.csdn.net/qq_39436397/article/details/98974342

    1、composer 出错

        找到对应 composer.json 删除相应的 一行代码；
        找到对应 composer.lock 删除对应的 多行代码；

    2、laravel-shop The Mix manifest does not exist.前端错误

        1、如没有安装node.js，先安装
        2、查看版本
            [root@localhost /]# node -v
                v10.9.0
            [root@localhost /]# npm -v
                6.2.0
        3、npm install --no-bin-links

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

yarn 安装：

    https://yarn.bootcss.com/docs/install/#centos-stable

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Elasticsearch 删除所有的索引

    参考：https://blog.csdn.net/Sely_Lou/article/details/84438103

    curl -XDELETE http://ip:9200/_all
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

ES 索引

    启动：

        sudo systemctl restart elasticsearch.service

    检测：

        curl http://127.0.0.1:9200/

    查看中文分词：

        sudo /usr/share/elasticsearch/bin/elasticsearch-plugin list

    关闭：

        sudo systemctl disable elasticsearch.service

    删除：

        curl -XDELETE http://localhost:9200/_all?pretty

    创建：

        curl -XPUT http://localhost:9200/products?pretty

    类型：

curl -H'Content-Type: application/json' -XPUT http://localhost:9200/products/_mapping/_doc?pretty -d'{
  "properties": {
    "type": { "type": "keyword" } ,
    "title": { "type": "text", "analyzer": "ik_smart" },
    "long_title": { "type": "text", "analyzer": "ik_smart" },
    "category_id": { "type": "integer" },
    "category": { "type": "keyword" },
    "category_path": { "type": "keyword" },
    "description": { "type": "text", "analyzer": "ik_smart" },
    "price": { "type": "scaled_float", "scaling_factor": 100 },
    "on_sale": { "type": "boolean" },
    "rating": { "type": "float" },
    "sold_count": { "type": "integer" },
    "review_count": { "type": "integer" },
    "skus": {
      "type": "nested",
      "properties": {
        "title": { "type": "text", "analyzer": "ik_smart", "copy_to": "skus_title" },
        "description": { "type": "text", "analyzer": "ik_smart", "copy_to": "skus_description" },
        "price": { "type": "scaled_float", "scaling_factor": 100 }
      }
    },
    "properties": {
      "type": "nested",
      "properties": {
        "name": { "type": "keyword" },
        "value": { "type": "keyword"},
        "search_value": { "type": "keyword" }
      }
    }
  }
}'

    命令：

        php artisan es:sync-products

    查看：

        curl http://localhost:9200/products?pretty

    关闭：

        curl -XPOST http://localhost:9200/products/_close?pretty

    开启：

        curl -XPOST http://localhost:9200/products/_open?pretty

    查看索引 index 列表

        curl http://localhost:9200/_cat/indices?v
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

 在Mac下显示所有文件

显示所有隐藏文件：

第一个命令：defaults write com.apple.finder AppleShowAllFiles TRUE
回车后，迫使系统将用户资源库里Preferences文件夹里com.apple.finder.plist文件中AppleShowAllFiles参数值改成TRUE
第二个命令：killall Finder 中断Finder进程，刷新视图

1 defaults write com.apple.finder AppleShowAllFiles  TRUE
2 killall Finder



不显示隐藏文件：

1 defaults write com.apple.finder AppleShowAllFiles  FALSE
2 killall Finder

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



                    .::::.
                  .::::::::.
                 .:::::::::'  FUCK YOU
               .:::::::::'
           ':::::::::::''
       .      .::::::::
        ':::::::::::::::
           `''::::::::::::.
           ``:::::::::::::::
            :::::``::::::::'        .:::.
           ::::'    :::::'       .::::::::.
          ::::'     :::::     .::::::::::::.
         :::'       :::::  .:::::::::''':::::.
        :::        :::::.::::::::::'     '::::.
      .::'        .::::::::::::::'         '::::
    .:::'         :::::::::::::'             ':::.
 ``````':.         ::::::::::'                 ':::.
                    '.:::::'                   ':'':::..

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
日程表（2020-08-05起执行）

1、6点起起床，洗漱，准备出发；

2、6点半，开始跑步（沿兴旺大街）[跑步 1 小时]；

3、7点半回来，吃早饭（巫山烤鱼早餐）[吃饭半小时]；

4、8点回来，开始看书（整理博客，社区学习，练习写字，整理金句）；

5、11点做饭

6、12点吃饭，休息到2点；

7、2点开始看书（整理博客，社区学习，练习写字，整理金句）；

8、6点做饭；

9、6点半吃饭，休息到7点半；

10、7点半，锻炼（哑铃、小区单杠）[1~2小时]；

11、9点左右，看看书；

12、10点半洗漱，准备睡觉；

13、11点睡觉。

附录：

1、个人博客要完善；
2、买的课程，全部重新做一遍；
3、筛选婚纱照拍摄公司；
4、要练字；
5、学英语；
6、学唱歌？
7、服务器找时间整理；
8、电脑看情况是否需要整理？

---------

2020-08-05

6点起床，
6点17出门，
6点47到达「兴旺公园」，
7点10往回走，
7点40到「巫山烤鱼」吃早餐，
8点10回家，
80点20洗澡，
8点40洗完，
9点10去了厕所；
上午看了电影《流浪地球》；
洗了衣服；

12点吃饭，
1点50睡觉
3点15醒来玩游戏
4点30看书
6点做饭
8点锻炼
10点玩游戏
12点睡觉

---------

2020-08-06

6点～9点20：起床、跑步、吃饭、洗澡、上厕所；
9点20～11点看抖音；
11点看婚纱照，学习；



- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

日程表（2020-08-05起执行）

1、6点起起床，洗漱，准备出发；

2、6点半，开始跑步（沿兴旺大街）[跑步 1 小时]；

3、7点半回来，吃早饭（巫山烤鱼早餐）[吃饭半小时]；

4、8点回来，开始看书（整理博客，社区学习，练习写字，整理金句）；

5、11点做饭

6、12点吃饭，休息到2点；

7、2点开始看书（整理博客，社区学习，练习写字，整理金句）；

8、6点做饭；

9、6点半吃饭，休息到7点半；

10、7点半，锻炼（哑铃、小区单杠）[1~2小时]；

11、9点左右，看看书；

12、10点半洗漱，准备睡觉；

13、11点睡觉。

附录：

1、个人博客要完善；
2、买的课程，全部重新做一遍；
3、筛选婚纱照拍摄公司；
4、要练字；
5、学英语；
6、学唱歌？
7、服务器找时间整理；
8、电脑看情况是否需要整理？










