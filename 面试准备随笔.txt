面试准备随笔

一、mysql 事务相关

1、mysql事务

    事务是一个 不可再分的工作单元，通常一个事务对应一个完整的业务（例如银行转账）；
    一个完整的事务需要批量的DML（insert、update、delete）语句共同联合完成

2、事务的四大特征（ACID）

    原子性：事务的最小单元，不可再分；要么全部成功，要么失败回滚；
    一致性：事务要求所有的DML语句操作的时候，前后的数据一致（a=4;b=6;a+b=10）(a+1=5;b-1=5;a+b=10)
    隔离性：事务A和事务B之间具有隔离性，互不干扰；
    持久性：是事务的保证，事务最后将内存中的数据保存在硬盘中；

3、术语

    开启事务：start transaction
    事务结束：end transaction
    提交事务：commit transaction
    回滚事务：rollback transaction

4、事务的隔离级别

    读未提交： read uncommitted
    读已提交： read committed
    可重复读： repeatable read
    串行化： serializable

5、读未提交

    事务A和事务B，事务A未提交的数据，事务B可以读到；
    读到的数据叫做“脏数据”
    存在【脏读、不可重复读，幻读】

    一个事务可以读到另一个事务未提交的数据；
    原因：事务在读数据的时候，并未对数据加锁；只是在修改的时候，增加【行级共享锁】

6、读已提交

    事务A和事务B，事务A提交的数据，事务B才能读到；
    避免【脏读】，存在【不可重复读、幻读】

    事务对当前读取的数据加【行级共享锁】（当读到是才加锁），读完改行，立即释放锁；
    事务更新数据时候（发生的瞬间），必须先对其加上【行级排他锁】，直到事务结束释放；

7、可重复读

    事务A和事务B，事务A提交的数据，事务B读不到；
    事务B是可重复的数据；
    避免【脏读、不可重复读】，存在【幻读】

    事务读取数据时候（发生的瞬间），必须先对其加上【行级共享锁】，直到事务结束释放；
    事务更新数据时候（发生的瞬间），必须先对其加上【行级排他锁】，直到事务结束释放；

8、可串行化

    事务A和事务B，事务A在操作数据库的时候，事务B只能等待；
    这种隔离级别很少用，吞吐量太低，用户体验差；
    每一次读到的都是数据库中真实的数据，事务A和事务B串行，而不是并发；
    避免【脏读、不可重复读、幻读】


9、设置隔离级别

    可以在【my.ini】文件中设置【transaction-isolation=READ COMMITTED】

    动态设置：

        set sesstion transaction isolation level read committed;（会话）
        set global transaction isolation level read committed;（全局）

10、隔离级别的三大问题

    1、脏读

        事务在执行过程中，会读到其他事务还没有提交的数据，如果其他事务回退了，会产生严重的不一致问题；

    2、不可重复读

        在同一个事务中，两次查询结果不一样，可能被其他事务【修改、删除】（添加不算）

    3、幻读

        在同一个事务中，两次查询结果不一样，可能被其他事务【添加】新数据

11、为什么【不可重复读】不包括【添加】新数据的情况？

    原因：

        一般解决【不可重复读】都是才去加锁的方法解决；
        事务A查询的时候，把A查询的那些数据都加上锁，事务B无法【修改、删除】；
        但是，不存在数据，没办法加锁；所以事务B还是可以在事务A查询的范围内加入新的行，这就是【幻读】

12、InnoDB的MVCC（多版本并发控制）

    MVCC实现了非锁定读，读的时候不需要加锁就能读到事务开始那个事务对应的版本数据；
    通过在数据中加入【隐藏的版本号相关的数据列】，然后结合 InnoDB 的 undo log，
    在非锁定读的时候，可以根据版本号，利用 undo log 将当前数据回退到对应的版本数据；

    MVCC 的目的就是在读数据的时候可以不使用锁，提高并发度；

13、什么是 redo log ？

    redo log 叫做【重做日志】，是用来实现事务的【持久性】。
    该日志分为两部分：重做日志缓冲（redo log buffer）和重做日志文件（redo log）
    前者是在内存中，后者是在磁盘中。

14、redo log 有什么用？

    mysql 为了提高性能不会把每次的修改都实时同步到磁盘，
    而是会先存到buffer pool（缓冲池），把这个当缓存用；
    然后使用后台线程去做缓冲池和磁盘之间的同步。

    如果没有同步的时候宕机或者断电了，会导致丢失部分已提交的事务修改信息！

    所以引入了 redo log 来记录已成功提交事务的修改信息，并且会把redo log持久化道磁盘，
    系统重启后读取 redo log 恢复最新数据；

    总结：redo log 是用来恢复数据的，用户保障已提交事务持久性；

15、什么是 undo log ?

    undo log 叫做回滚日志，用于记录数据被修改前的信息。
    undo log 主要记录的是数据的逻辑变化，
    为了在发生错误的时候回滚之前的操作，需要将之前的操作都记录下来，然后错误时回滚；

16、undo log 有什么用？

    undo log 记录事务修改之前版本的数据信息，因此假如由于系统错误或者rollback 操作，要回滚数据；
    可以根据 undo log 的信息来进行回滚到没有被修改前的状态；

    总结：undo log 是用来回滚数据的，用于保障未提交事务的【原子性】

17、小结（一）

    原子性：通过 undo log 来实现；
    持久性：通过 redo log 来实现；
    隔离性：通过【读写锁 + MVCC】来实现；
    一致性：通过【原子性、持久性、隔离性】来实现；

18、MVCC 多版本的并发控制（Multi Version Concurrency Control）

    当我们在修改数据的时候，可以为这条数据创建一个快照，后面就可以直接读取这个快照；

19、MVCC 的实现机制

    InnoDB 内部为每一列添加了两个隐藏列：【DB_TRX_ID】和【DB_ROLL_PTR】
    （mysql 另外还有一个隐藏列表 DB_ROW_ID，这是在 InnoDB 表没有主键的时候用来做主键）

20、DB_TRX_ID

    长度为 6 字节，存储了插入或更新语句的最后一个事务ID；

21、DB_ROLL_PTR

    长度为 7 字节，称之为：“回滚指针”；
    指针指向写入回滚段的 undo log 记录，读取记录的时候会根据指针去读取 undo log 中的记录；

22、MVCC 查询的两大规则

    1、只查询事务ID小于或等于当前事务ID的数据

        这里要【等于】是因为假如自己的事务插入了一条数据，会产生一条当前事务ID的数据；
        所以必须包含本事务自己插入的数据

    2、只查询为删除（回滚指针为空null）或者回滚置大于当前事务ID的数据

        这里不能【等于】是因为如果自己的事务删除了一条数据，会产生一条当前事务ID的数据；
        所以必须排除掉自己删除的数据；


二、mysql 存储引擎

1、常用引擎

    InnoDB 存储引擎
    MyISAM 存储引擎
    Memory 存储引擎

2、InnoDB 存储引擎

    提供事务、回滚、奔溃恢复能力、多版本并发控制
    mysql 默认的存储引擎
    支持 AUTO_INCREMENT（自动增长），自动增长列必须为主键
    支持 FOREING KEY（外键），外键所依赖的表叫做父表；父表中被子表外键关联的字段必须为主键；

3、MyISAM 存储引擎

    三种文件：frm MYD MYI
    frm：表的结构
    MYD：表的数据（MYdata）
    MYI：表的索引（MYindex）

    优势：占用空间小、处理速度快
    缺点：不支持事务

4、MEMORY 存储引擎

    数据全部都放在内存中；
    每个 MEMORY 存储引擎的表实际对应一个磁盘文件，文件名与表明相同 frm 类型；
    文件存储表结构，数据放在内存中；

    MEMORY 默认使用 哈希索引；速度比 B 型树索引快；但是内存异常会影响数据；


三、mysql 索引相关


1、什么是索引？

    索引是存储引擎用于快速找到记录的一种数据结构 -- 《高性能mysql》
    理解：一种排好序的数据结构

2、为什么使用索引？

    索引的出现就是为了提高查询效率，就像书的目录；
    代价：
        1、增加了存储空间；
        2、插入和修改的时候，索引也要变动，需要维护

3、常用的索引结构有哪些？

    B树、B+树、哈希索引、二叉树、平衡二叉树、全文索引

    哈希索引：
        1、采用哈希算法，每一行存储了被索引字段的哈希码（hash code）；
        2、并保存了指向哈希表中每一行指针
        3、无法排序
        4、适用于【等值查询】

    二叉树：
        1、极端的时候，出现线型树（全表扫描）

    平衡二叉树：
        1、数据太多的时候，树太高，I/O太多；

    B树：
        平衡树（balance tree）
        B树相对于【平衡二叉树】，每个节点存储了更多的键值（key）和数据（data）；
        高度比较低

4、mysql-InnoDB 使用什么索引？

    B+树

5、什么是 B+树 ？

    简单理解：多叉平衡树；

6、B+树 的特点

    1、非叶子结点不存储数据，那么就可以存储更多的索引

    2、叶子结点区间有访问指针，提高区间访问的性能

7、【B+树】和【B树】的区别？

    1、B+树非叶子结点不存储数据，仅存储键值；B树不仅存储键值，也会存储数据
    ** 数据库中的页大小是固定的，InnoDB 中的页默认大小是16KB；

    2、B+树索引的所有数据均存储在叶子结点，而且数据是按照顺序排序的；
    B+树中各个页是通过【双向链表】链接的，叶子结点中的数据是通过单项链表链接；
    【范围查找、排序查找、分组查找、去重查找】变得简单

8、什么是【聚簇索引】【非聚簇索引】？

    聚簇索引：
        以主键作为B+树索引的键值而构建的B+树索引，称之为【聚簇索引】；

    非聚簇索引：
        以主键以外的列值作为键值构建的B+树索引，称之为【非聚餐索引】；

9、【聚簇索引】和【非聚簇索引】区别？

    【非聚簇索引】的叶子结点不存储表中的数据，而是存储该列对应的主键；
    想要查找数据，需要再根据主键去【聚簇索引】进行查找，这个过程称为【回表】；

10、什么是【覆盖索引】？

    如果索引包含所有满足查询需要的数据，则该索引称为【覆盖索引】；
    也就是平时说的不需要【回表】操作；

    判断标准：
        使用 explain，通过 extra 列来判断，索引覆盖显示【using idnex】;

11、什么是【回表】？

    1、先定位主键值；
    2、通过主键值定位行记录；
    （需要扫描两边索引树）


四：PHP 相关

1、什么是【SCRF攻击】和【XSS攻击】？

    SCRF：跨站请求伪造，可以通过判断来源和加 token 的方式来防范；
    XSS：跨站脚本攻击，可以通过对内容转义和过滤来防范；

2、http 状态码及其含义

    1xx：临时响应，并需要请求者继续执行操作

        100：（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。
        101：（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。

    2xx：表示请求成功

        200：成功（success）
        201：请求成功并且服务器创建了新的资源
        202：接受请求但没创建资源；

    3xx：重定向

        301：永久重定向（服务器返回此响应【GET 或 HEAD】请求的响应时，会自动将请求者转到新位置）
        302：临时重定向（服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求）

    4xx：请求出错

        400：Bad Request是由于明显的客户端错误
            （例如，格式错误的请求语法，太大的大小，无效的请求消息或欺骗性路由请求），服务器不能或不会处理该请求
        401：请求需要用户验证（Unauthorized）
        403：服务器接收请求，拒绝执行（Forbidden）
        404：请求失败，资源在服务器未找到（Not Found）
        405：客户端请求中的方法被禁止（Method Not Allowed）

    5xx：服务器出错

        500：（服务器内部错误）  服务器遇到错误，无法完成请求。
        501：（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。
        502：（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。
        503：（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。
        504：（网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。
        505：（HTTP 协议版本不受支持） 服务器不支持请求的HTTP协议的版本，无法完成处理

3、PHP 设计模式

    1、单例设计模式

        应用程序中最多只有该类的一个实例存在，一旦创建，就会一直存在于内存中！
        单例设计模式常应用于数据库类设计，采用单例模式，只连接一次数据库，防止打开多个数据库连接。

        一个单例类应具备以下特点：

        单例类不能直接实例化创建，而是只能由类本身实例化。因此，要获得这样的限制效果，构造函数必须标记为private，从而防止类被实例化。
        需要一个私有静态成员变量来保存类实例和公开一个能访问到实例的公开静态方法。
        在PHP中，为了防止他人对单例类实例克隆，通常还为其提供一个空的私有__clone()方法。

    2、工厂设计模式

        对象实例的生产工厂。工厂模式提供了通用的方法有助于我们去获取对象，而不需要关心其具体的内在的实现

        使用场景：使用方法 new 实例化类，每次实例化只需调用工厂类中的方法实例化即可。

        我们举例子，假设矩形、圆都有同样的一个方法，那么我们用基类提供的API来创建实例时，
        通过传参数来自动创建对应的类的实例，他们都有获取周长和面积的功能

    3、观察者设计模式

        观察者模式是一种事件系统，意味着这一模式允许某个类观察另一个类的状态，
        当被观察的类状态发生改变的时候，观察类可以收到通知并且做出相应的动作;
        观察者模式为您提供了避免组件之间紧密耦。看下面例子你就明白了

        使用场景：
            1、用户登录，需要写日志，送积分，参与活动 等
            2、使用消息队列，把用户和日志，积分，活动之间解耦合

    4、适配器模式

        将一个类的接口转换成客户希望的另一个接口,适配器模式使得原本的由于接口不兼容而不能一起工作的那些类可以一起工作。

        应用场景：老代码接口不适应新的接口需求，或者代码很多很乱不便于继续修改，或者使用第三方类库。
            例如：php连接数据库的方法：mysql,,mysqli,pdo,可以用适配器统一

    5、策略模式

        将一组特定的行为和算法封装成类，以适应某些特定的上下文环境。

        例如：一个电商网站系统，针对男性女性用户要各自跳转到不同的商品类目，并且所有广告位展示不同的广告

4、PHP 常用函数

    1、数组相关

        count：计算数组中的单元数目，或对象中的属性个数

            ( Countable|array $value , int $mode = COUNT_NORMAL ) : int
            mode：如果可选的 mode 参数设为 COUNT_RECURSIVE（或 1），count() 将递归地对数组计数。对计算多维数组的所有单元尤其有用

        array_chunk：将一个数组分割成多个

            ( array $array , int $length , bool $preserve_keys = false ) : array
            length：最后一个数组的单元数目可能会少于 length 个
            preserve_keys：设为 true，可以使 PHP 保留输入数组中原来的键名。
            如果你指定了 false，那每个结果数组将用从零开始的新数字索引。默认值是 false

        array_column：返回数组中指定的一列

            ( array $input , mixed $column_key , mixed $index_key = null ) : array
            index_key：作为返回数组的索引/键的列，它可以是该列的整数索引，或者字符串键值

        array_diff：计算数组的差集

            ( array $array , array ...$arrays ) : array
            对比 array 和其他一个或者多个数组，返回在 array 中但是不在其他 array 里的值

        array_keys：返回数组中部分的或所有的键名

            ( array $array , mixed $search_value , bool $strict = false ) : array
            如果指定了可选参数 search_value，则只返回该值的键名。否则 input 数组中的所有键名都会被返回

        array_map：为数组的每个元素应用回调函数

            ( callable $callback , array $array , array ...$arrays ) : array
            多个数组操作合并时，callback 可以设置为 null。 如果只提供了 array 一个数组， array_map() 会返回输入的数组。

        array_unshift：在数组开头插入一个或多个单元

            ( array &$array , mixed ...$values ) : int
            注意单元是作为整体被插入的，因此传入单元将保持同样的顺序

        array_shift：将数组开头的单元移出数组

            ( array &$array ) : mixed
            第一个单元移出并作为结果返回，将 array 的长度减一并将所有其它单元向前移动一位。
            所有的数字键名将改为从零开始计数，文字键名将不变

        array_push：将一个或多个单元压入数组的末尾（入栈）

            ( array &$array , mixed $value1 , mixed $... = ? ) : int

        array_pop：弹出数组最后一个单元（出栈）

            ( array &$array ) : mixed

        array_flip：交换数组中的键和值

            ( array $array ) : array
            如果同一个值出现多次，则最后一个键名将作为它的值，其它键会被丢弃

        array_merge：合并一个或多个数组

            ( array $... = ? ) : array
            如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值
            然而，如果数组包含数字键名，后面的值将 不会 覆盖原来的值，而是附加到后面

        array_multisort：对多个数组或多维数组进行排序

            array_multisort ( array &$array1 , mixed $array1_sort_order = SORT_ASC , mixed $array1_sort_flags = SORT_REGULAR , mixed $... = ? ) : bool
            可以用来一次对多个数组进行排序，或者根据某一维或多维对多维数组进行排序

        array_unique：移除数组中重复的值

            array_unique ( array $array , int $sort_flags = SORT_STRING ) : array
            接受 array 作为输入并返回没有重复值的新数组
            注意键名保留不变。array_unique() 先将值作为字符串排序，然后对每个值只保留第一个遇到的键名，接着忽略所有后面的键名

        array_values：返回数组中所有的值

            array_values ( array $array ) : array
            返回 input 数组中所有的值并给其建立数字索引

    2、字符串相关

        substr：返回字符串的子串

            substr ( string $string , int $start , int $length = ? ) : string
            返回字符串 string 由 start 和 length 参数指定的子字符串

        strlen：获取字符串长度

            strlen ( string $string ) : int
            返回给定的字符串 string 的长度；如果 string 为空，则返回 0

        strpos：查找字符串首次出现的位置

            strpos ( string $haystack , mixed $needle , int $offset = 0 ) : int
            offset：搜索会从字符串该字符数的起始位置开始统计。 如果是负数，搜索会从字符串结尾指定字符数开始
            如果没有找到，返回 false；应使用 === 运算符来测试此函数的返回值

        stripos：查找字符串首次出现的位置（不区分大小写）

            stripos ( string $haystack , string $needle , int $offset = 0 ) : int
            如果没有找到，返回 false；应使用 === 运算符来测试此函数的返回值

        strrpos：计算指定字符串在目标字符串中最后一次出现的位置

            strrpos ( string $haystack , string $needle , int $offset = 0 ) : int
            如果没有找到，返回 false；应使用 === 运算符来测试此函数的返回值

        strripos：计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）

            strripos ( string $haystack , string $needle , int $offset = 0 ) : int
            如果没有找到，返回 false；应使用 === 运算符来测试此函数的返回值

        str_replace：子字符串替换

            str_replace ( mixed $search , mixed $replace , mixed $subject , int &$count = ? ) : mixed
            该函数返回一个字符串或者数组。该字符串或数组是将 subject 中全部的 search 都被 replace 替换之后的结果

        substr_replace：替换字符串的子串

            substr_replace ( mixed $string , mixed $replacement , mixed $start , mixed $length = ? ) : mixed
            在字符串 string 的副本中将由 start 和可选的 length 参数限定的子字符串使用 replacement 进行替换
            length：正数，表示 string 中被替换的子字符串的长度。
                    负数，它表示待替换的子字符串结尾处距离 string 末端的字符个数。
                    没有，那么它默认为 strlen( string ) （字符串的长度）。
                    0，那么这个函数的功能为将 replacement 插入到 string 的 start 位置处

        explode：使用一个字符串分割另一个字符串

            explode ( string $separator , string $string , int $limit = PHP_INT_MAX ) : array
            示例：
            $data = "foo:*:1023:1000::/home/foo:/bin/sh";
            list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);

        implode：将一个一维数组的值转化为字符串

            implode ( string $glue , array $pieces ) : string
            glue：默认为空的字符串

        strtoupper — 将字符串转化为大写
        strtolower — 将字符串转化为小写

        lcfirst — 使一个字符串的第一个字符小写
        ucfirst — 将字符串的首字母转换为大写

        ucwords — 将字符串中每个单词的首字母转换为大写

            ucwords ( string $str , string $delimiters = " \t\r\n\f\v" ) : string
            delimiters：默认：空格符、制表符、换行符、回车符、水平线以及竖线）之后的子字符串

        strrev — 反转字符串

            strrev ( string $string ) : string
            返回 string 反转后的字符串

        strstr — 查找字符串的首次出现

            strstr ( string $haystack , mixed $needle , bool $before_needle = false ) : string
            返回 haystack 字符串从 needle 第一次出现的位置开始到 haystack 结尾的字符串
            若为 true，strstr() 将返回 needle 在 haystack 中的位置之前的部分

        stristr — 查找字符串的首次出现（不区分大小写）

    3、日期时间相关

        strtotime — 将任何字符串的日期时间描述解析为 Unix 时间戳

            strtotime ( string $datetime , int $now = time() ) : int

        date — 格式化一个本地时间／日期

            date ( string $format , int $timestamp = ? ) : string

        time — 返回当前的 Unix 时间戳

五：Linux相关命令

1、常用命令（枚举）

    ls：列出目录
    cp：复制
    rm：删除
    cat：将文件的内容打印到标准输出
    mkdir：建立目录
    tar：打包压缩
    ps：查看进程
    top：查看机器使用情况
    df：检查磁盘空间占用情况
    find：在指定路径下查找指定文件
    grep：过滤文本
    cd：改变当前工作目录
    mount：挂载/卸载指定的文件系统
    ifconfig：配置网络或显示当前网络接口状态
    telnet:：远程登录
    wc：统计指定文件中的字节数、字数、行数，并将统计结果显示输出

2、获取文件行数

    wc -l filename

    wc testfile：行数为3、单词数92、字节数598、文件名

3、输入文件的最后5行到另一个文件中

    tail -n 5 file1 >> file2

4、查找文件中包含 hello 的行

    grep hello filename

5、如何让一个程序在后台运行并把输入定向到指定的文件

    nohup 程序 >> 文件名 2>&1 &

6、如何把一个文件的内容添加到另一个文件的末尾

    cat file1 >> file2

7、如何实时的显示一个文件的输出

    使用 more 或者 less

8、查看定时任务

    crontab -l

9、vi编辑器中，如何替换指定的字符串

    使用s命令，例如：
    ：n1,n2s/word1/word2/g，将第n1行与n2行之间的word1替换为word2
    ：1,$s/word1/word2/g，从第一行到最后一行中的word1替换为word2

10、crontab参数含义（* * * * *）

    minute: 区间为 0 – 59
    hour: 区间为0 – 23
    day-of-month: 区间为0 – 31
    month: 区间为1 – 12. 1 是1月. 12是12月.
    Day-of-week: 区间为0 – 7. 周日可以是0或7.

11、linux 查看文件内容 常用命令？

    cat file1 从第一个字节开始正向查看文件的内容
    head -2 file1 查看一个文件的前两行
    tail -2 file1 查看一个文件的最后两行

12、统计日志中根据ip进行排重，并统计相同ip统计的次数

    cat test.log | awk -F ' ' '{print $2}' | sort -k 1 -n -r | uniq -c > test.txt

    sort：可针对文本文件的内容，以行为单位来排序

        -k 按照第几列排序
        -n 依照数值的大小排序
        -r 以相反的顺序来排序

13、查询 test.log 里面空行的所在行号

    grep -n ^$ test.log | awk -F':' '{print $1}'

14、查询 test.log 以 word 结尾的行

    grep word$ test.log

15、打印出 test.log 文件第 1 到第 3 行

    head -3 test.log

16、如何实现同一个ip如果1秒钟内多次请求后台接口，然后10分钟内禁止此ip访问？

    iptables -I INPUT -s ***.***.***.*** -j DROP

    iptables -D INPUT -s ***.***.***.*** -j DROP

六、redis 相关

1、为什么要用 redis ？

    因为传统的关系型数据库如 Mysql 已经不能适用所有的场景了，
    比如秒杀的库存扣减，APP 首页的访问流量高峰等等，都很容易把数据库打崩，所以引入了缓存

2、redis 为什么快？

    redis 采用的是基于内存的采用的是单进程单线程模型的 KV 数据库，100000+ 的QPS（每秒内查询次数）

        1、完全基于内存，绝大部分请求是纯粹的内存操作，非常快速
        2、数据结构简单，对数据操作也简单，redis 中的数据结构是专门进行设计的
        3、采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗

3、redis 常用的 5 种数据结构

    string list set zset hash

4、string 用的多，常用命令

    set key value【设置指定 key 的值】
    get key value【获取指定 key 的值】
    mset key value [key value ...]【同时设置一个或多个 key-value 对】
    mget key [key ...]【获取所有(一个或多个)给定 key 的值】
    del key [key ...]【该命令用于在 key 存在时删除 key】
    setnx key value【只有在 key 不存在时设置 key 的值】
    expire key seconds【为给定 key 设置过期时间，以秒计】

    incr key【将 key 中储存的数字值增一】
    decr key【将 key 中储存的数字值减一】
    incrby key increment【key 所储存的值加上给定的增量值（increment）】
    decrby key decrement【key 所储存的值减去给定的减量值（decrement）】

5、redis 是怎么持久化的

    RDB 做镜像全量持久化，AOF 做增量持久化
    RDB 更适合做冷备，AOF 更适合做热备

    RDB：持久化机制
        对 Redis 中的数据执行周期性的持久化

    AOF：机制对每条写入命令作为日志
        以 append-only 的模式写入一个日志文件中，因为这个模式是只追加的方式，
        所以没有任何磁盘寻址的开销，所以很快，有点像 Mysql 中的 binlog

6、RDB 优缺点

    优点：

        1、RDB 对 Redis 的性能影响非常小，是因为在同步数据的时候他只是 fork 了一个子进程去做持久化的，
        而且他在数据恢复的时候速度比 AOF 来的快

    缺点：

        1、RDB都是快照文件，都是默认五分钟甚至更久的时间才会生成一次，
        这意味着你这次同步到下次同步这中间五分钟的数据都很可能全部丢失掉。
        AOF则最多丢一秒的数据，数据完整性上高下立判。

        2、还有就是RDB在生成数据快照的时候，如果文件很大，客户端可能会暂停几毫秒甚至几秒，
        你公司在做秒杀的时候他刚好在这个时候 fork 了一个子进程去生成一个大快照，出大问题

7、AOF 优缺点

    优点：

        1、RDB五分钟一次生成快照，但是AOF是一秒一次去通过一个后台的线程fsync操作，那最多丢这一秒的数据

        2、AOF在对日志文件进行操作的时候是以 append-only 的方式去写的，
        他只是追加的方式写数据，自然就少了很多磁盘寻址的开销了，写入性能惊人，文件也不容易破损

    缺点：

        1、一样的数据，AOF 文件比 RDB 要大
        2、AOF 开启后，Redis 支持写的 QPS 会比 RDB 支持写的要低

8、redis 雪崩

    大量用户涌入，但是缓存当时所有的 Key 都失效，重启数据库，但是数据库立马又被新的流量给打死了。这就是我理解的缓存雪崩

    处理方式：
        在批量往Redis存数据的时候，把每个 Key 的失效时间都加个随机值

9、缓存穿透和击穿么，可以说说他们跟雪崩的区别？

    缓存穿透：是指缓存和数据库中都没有的数据，而用户不断发起请求，

        我们数据库的 id 都是1开始自增上去的，如发起为id值为 -1 的数据或 id 为特别大不存在的数据。
        这时的用户很可能是攻击者，攻击会导致数据库压力过大，严重会击垮数据库

        解决：在接口层增加校验，如：id <=0 的直接拦截

    缓存击穿：跟缓存雪崩有点像，但是又有一点不一样

        指一个Key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，
        当这个Key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个完好无损的桶上凿开了一个洞

        解决：网关层 nginx 有配置项，对单个 ip 每秒访问次数超出阈值的 ip 都拉黑
             设置热点数据永远不过期

    redis 还有一个高级用法布隆过滤器（bloom filter），不太了解

10、redis 分布式锁

    先拿 setnx 来争抢锁，抢到之后，再用 expire 给锁加一个过期时间防止锁忘记了释放

11、如果在 setnx 之后执行 expire 之前进程意外 crash 或者要重启维护，怎么办？

    set 指令有非常复杂的参数，这个应该是可以同时把 setnx 和 expire 合成一条指令来用的

    set key value [EX seconds] [PX milliseconds] [NX|XX]

12、redis 里面有 1亿个 key，其中有 10w 个 key 是以某个固定的已知的前缀开头的，如何将它们全部找出来？

    使用keys指令可以扫出指定模式的key列表
    keys name*

13、redis 做异步队列，怎么用？

    使用 list 结构作为队列，rpush 生产消息，lpop 消费消息
    当 lpop 没有消息的时候，要适当 sleep一会再重试

14、如何生产一次消费多次？

    使用 pub/sub 主题订阅者模式，可以实现 1:N 的消息队列
    缺点：在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如RocketMQ等

15、redis 如何实现延时队列

    使用 sorted set，拿时间戳作为 score

15、是否使用过 redis 集群，集群的高可用怎么保证，集群的原理是什么？

    Redis Sentinal 着眼于高可用，在 master 宕机时会自动将 slave 提升为 master，继续提供服务。
    Redis Cluster  着眼于扩展性，在单个 redis 内存不足时，使用 Cluster 进行分片存储。

16、哨兵组件的主要功能：

    集群监控：负责监控 Redis master 和 slave 进程是否正常工作。
    消息通知：如果某个 Redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。
    故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。
    配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。
































